'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión de runtime:4.0.30319.42000
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="BDLibros")>  _
Partial Public Class LibrosDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Definiciones de métodos de extensibilidad"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertCliente(instance As Cliente)
    End Sub
  Partial Private Sub UpdateCliente(instance As Cliente)
    End Sub
  Partial Private Sub DeleteCliente(instance As Cliente)
    End Sub
  Partial Private Sub InsertDetalle(instance As Detalle)
    End Sub
  Partial Private Sub UpdateDetalle(instance As Detalle)
    End Sub
  Partial Private Sub DeleteDetalle(instance As Detalle)
    End Sub
  Partial Private Sub InsertLibro(instance As Libro)
    End Sub
  Partial Private Sub UpdateLibro(instance As Libro)
    End Sub
  Partial Private Sub DeleteLibro(instance As Libro)
    End Sub
  Partial Private Sub InsertPedido(instance As Pedido)
    End Sub
  Partial Private Sub UpdatePedido(instance As Pedido)
    End Sub
  Partial Private Sub DeletePedido(instance As Pedido)
    End Sub
  Partial Private Sub InsertUsuario(instance As Usuario)
    End Sub
  Partial Private Sub UpdateUsuario(instance As Usuario)
    End Sub
  Partial Private Sub DeleteUsuario(instance As Usuario)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("BDLibrosConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Cliente() As System.Data.Linq.Table(Of Cliente)
		Get
			Return Me.GetTable(Of Cliente)
		End Get
	End Property
	
	Public ReadOnly Property Detalle() As System.Data.Linq.Table(Of Detalle)
		Get
			Return Me.GetTable(Of Detalle)
		End Get
	End Property
	
	Public ReadOnly Property Libro() As System.Data.Linq.Table(Of Libro)
		Get
			Return Me.GetTable(Of Libro)
		End Get
	End Property
	
	Public ReadOnly Property Pedido() As System.Data.Linq.Table(Of Pedido)
		Get
			Return Me.GetTable(Of Pedido)
		End Get
	End Property
	
	Public ReadOnly Property Usuario() As System.Data.Linq.Table(Of Usuario)
		Get
			Return Me.GetTable(Of Usuario)
		End Get
	End Property
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.spLoginUsuarioE")>  _
	Public Function spLoginUsuarioE(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="NomUsuario", DbType:="VarChar(30)")> ByVal nomUsuario As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Contrasena", DbType:="VarChar(30)")> ByVal contrasena As String) As ISingleResult(Of spLoginUsuarioEResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), nomUsuario, contrasena)
		Return CType(result.ReturnValue,ISingleResult(Of spLoginUsuarioEResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.spActualizarLibro")>  _
	Public Function spActualizarLibro(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CodLibro", DbType:="VarChar(4)")> ByVal codLibro As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Titulo", DbType:="VarChar(50)")> ByVal titulo As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Autor", DbType:="VarChar(50)")> ByVal autor As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Genero", DbType:="VarChar(50)")> ByVal genero As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Resumen", DbType:="VarChar(100)")> ByVal resumen As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Precio", DbType:="Decimal(4,2)")> ByVal precio As System.Nullable(Of Decimal), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Stock", DbType:="Int")> ByVal stock As System.Nullable(Of Integer)) As ISingleResult(Of spActualizarLibroResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), codLibro, titulo, autor, genero, resumen, precio, stock)
		Return CType(result.ReturnValue,ISingleResult(Of spActualizarLibroResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.spEliminarLibro")>  _
	Public Function spEliminarLibro(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CodLibro", DbType:="VarChar(4)")> ByVal codLibro As String) As ISingleResult(Of spEliminarLibroResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), codLibro)
		Return CType(result.ReturnValue,ISingleResult(Of spEliminarLibroResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.spListarLibro")>  _
	Public Function spListarLibro() As ISingleResult(Of spListarLibroResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of spListarLibroResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.spActualizarCliente")>  _
	Public Function spActualizarCliente(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CodCliente", DbType:="VarChar(4)")> ByVal codCliente As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Apellidos", DbType:="VarChar(30)")> ByVal apellidos As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Nombres", DbType:="VarChar(30)")> ByVal nombres As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Direccion", DbType:="VarChar(50)")> ByVal direccion As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Telefono", DbType:="VarChar(10)")> ByVal telefono As String) As ISingleResult(Of spActualizarClienteResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), codCliente, apellidos, nombres, direccion, telefono)
		Return CType(result.ReturnValue,ISingleResult(Of spActualizarClienteResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.spEliminarCliente")>  _
	Public Function spEliminarCliente(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CodCliente", DbType:="VarChar(4)")> ByVal codCliente As String) As ISingleResult(Of spEliminarClienteResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), codCliente)
		Return CType(result.ReturnValue,ISingleResult(Of spEliminarClienteResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.spListarClientes")>  _
	Public Function spListarClientes() As ISingleResult(Of spListarClientesResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of spListarClientesResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.spAgregarLibro")>  _
	Public Function spAgregarLibro(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Titulo", DbType:="VarChar(50)")> ByVal titulo As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Autor", DbType:="VarChar(50)")> ByVal autor As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Genero", DbType:="VarChar(50)")> ByVal genero As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Resumen", DbType:="VarChar(100)")> ByVal resumen As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Precio", DbType:="Decimal(4,2)")> ByVal precio As System.Nullable(Of Decimal), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Stock", DbType:="Int")> ByVal stock As System.Nullable(Of Integer)) As ISingleResult(Of spAgregarLibroResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), titulo, autor, genero, resumen, precio, stock)
		Return CType(result.ReturnValue,ISingleResult(Of spAgregarLibroResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.spAgregarCliente")>  _
	Public Function spAgregarCliente(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Apellidos", DbType:="VarChar(30)")> ByVal apellidos As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Nombres", DbType:="VarChar(30)")> ByVal nombres As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Direccion", DbType:="VarChar(50)")> ByVal direccion As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Telefono", DbType:="VarChar(10)")> ByVal telefono As String) As ISingleResult(Of spAgregarClienteResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), apellidos, nombres, direccion, telefono)
		Return CType(result.ReturnValue,ISingleResult(Of spAgregarClienteResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.spBuscarCliente")>  _
	Public Function spBuscarCliente(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal variable As String) As ISingleResult(Of spBuscarClienteResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), variable)
		Return CType(result.ReturnValue,ISingleResult(Of spBuscarClienteResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.spBuscarLibro")>  _
	Public Function spBuscarLibro(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal variable As String) As ISingleResult(Of spBuscarLibroResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), variable)
		Return CType(result.ReturnValue,ISingleResult(Of spBuscarLibroResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.spRealizarVenta")>  _
	Public Function spRealizarVenta(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CodCliente", DbType:="VarChar(4)")> ByVal codCliente As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CodLibro", DbType:="VarChar(4)")> ByVal codLibro As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Cantidad", DbType:="Int")> ByVal cantidad As System.Nullable(Of Integer)) As ISingleResult(Of spRealizarVentaResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), codCliente, codLibro, cantidad)
		Return CType(result.ReturnValue,ISingleResult(Of spRealizarVentaResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.spListarVentas")>  _
	Public Function spListarVentas() As ISingleResult(Of spListarVentasResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of spListarVentasResult))
	End Function
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TCliente")>  _
Partial Public Class Cliente
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CodCliente As String
	
	Private _Apellidos As String
	
	Private _Nombres As String
	
	Private _Direccion As String
	
	Private _Telefono As String
	
	Private _Detalle As EntitySet(Of Detalle)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCodClienteChanging(value As String)
    End Sub
    Partial Private Sub OnCodClienteChanged()
    End Sub
    Partial Private Sub OnApellidosChanging(value As String)
    End Sub
    Partial Private Sub OnApellidosChanged()
    End Sub
    Partial Private Sub OnNombresChanging(value As String)
    End Sub
    Partial Private Sub OnNombresChanged()
    End Sub
    Partial Private Sub OnDireccionChanging(value As String)
    End Sub
    Partial Private Sub OnDireccionChanged()
    End Sub
    Partial Private Sub OnTelefonoChanging(value As String)
    End Sub
    Partial Private Sub OnTelefonoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Detalle = New EntitySet(Of Detalle)(AddressOf Me.attach_Detalle, AddressOf Me.detach_Detalle)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodCliente", DbType:="VarChar(4) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CodCliente() As String
		Get
			Return Me._CodCliente
		End Get
		Set
			If (String.Equals(Me._CodCliente, value) = false) Then
				Me.OnCodClienteChanging(value)
				Me.SendPropertyChanging
				Me._CodCliente = value
				Me.SendPropertyChanged("CodCliente")
				Me.OnCodClienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Apellidos", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property Apellidos() As String
		Get
			Return Me._Apellidos
		End Get
		Set
			If (String.Equals(Me._Apellidos, value) = false) Then
				Me.OnApellidosChanging(value)
				Me.SendPropertyChanging
				Me._Apellidos = value
				Me.SendPropertyChanged("Apellidos")
				Me.OnApellidosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nombres", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property Nombres() As String
		Get
			Return Me._Nombres
		End Get
		Set
			If (String.Equals(Me._Nombres, value) = false) Then
				Me.OnNombresChanging(value)
				Me.SendPropertyChanging
				Me._Nombres = value
				Me.SendPropertyChanged("Nombres")
				Me.OnNombresChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Direccion", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Direccion() As String
		Get
			Return Me._Direccion
		End Get
		Set
			If (String.Equals(Me._Direccion, value) = false) Then
				Me.OnDireccionChanging(value)
				Me.SendPropertyChanging
				Me._Direccion = value
				Me.SendPropertyChanged("Direccion")
				Me.OnDireccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Telefono", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property Telefono() As String
		Get
			Return Me._Telefono
		End Get
		Set
			If (String.Equals(Me._Telefono, value) = false) Then
				Me.OnTelefonoChanging(value)
				Me.SendPropertyChanging
				Me._Telefono = value
				Me.SendPropertyChanged("Telefono")
				Me.OnTelefonoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Detalle", Storage:="_Detalle", ThisKey:="CodCliente", OtherKey:="CodCliente")>  _
	Public Property Detalle() As EntitySet(Of Detalle)
		Get
			Return Me._Detalle
		End Get
		Set
			Me._Detalle.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Detalle(ByVal entity As Detalle)
		Me.SendPropertyChanging
		entity.Cliente = Me
	End Sub
	
	Private Sub detach_Detalle(ByVal entity As Detalle)
		Me.SendPropertyChanging
		entity.Cliente = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TDetalle")>  _
Partial Public Class Detalle
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _NroPedido As String
	
	Private _CodLibro As String
	
	Private _CodCliente As String
	
	Private _Cantidad As Integer
	
	Private _PrecioUnitario As Decimal
	
	Private _Cliente As EntityRef(Of Cliente)
	
	Private _Libro As EntityRef(Of Libro)
	
	Private _Pedido As EntityRef(Of Pedido)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnNroPedidoChanging(value As String)
    End Sub
    Partial Private Sub OnNroPedidoChanged()
    End Sub
    Partial Private Sub OnCodLibroChanging(value As String)
    End Sub
    Partial Private Sub OnCodLibroChanged()
    End Sub
    Partial Private Sub OnCodClienteChanging(value As String)
    End Sub
    Partial Private Sub OnCodClienteChanged()
    End Sub
    Partial Private Sub OnCantidadChanging(value As Integer)
    End Sub
    Partial Private Sub OnCantidadChanged()
    End Sub
    Partial Private Sub OnPrecioUnitarioChanging(value As Decimal)
    End Sub
    Partial Private Sub OnPrecioUnitarioChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Cliente = CType(Nothing, EntityRef(Of Cliente))
		Me._Libro = CType(Nothing, EntityRef(Of Libro))
		Me._Pedido = CType(Nothing, EntityRef(Of Pedido))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NroPedido", DbType:="VarChar(6) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property NroPedido() As String
		Get
			Return Me._NroPedido
		End Get
		Set
			If (String.Equals(Me._NroPedido, value) = false) Then
				If Me._Pedido.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnNroPedidoChanging(value)
				Me.SendPropertyChanging
				Me._NroPedido = value
				Me.SendPropertyChanged("NroPedido")
				Me.OnNroPedidoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodLibro", DbType:="VarChar(4) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CodLibro() As String
		Get
			Return Me._CodLibro
		End Get
		Set
			If (String.Equals(Me._CodLibro, value) = false) Then
				If Me._Libro.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCodLibroChanging(value)
				Me.SendPropertyChanging
				Me._CodLibro = value
				Me.SendPropertyChanged("CodLibro")
				Me.OnCodLibroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodCliente", DbType:="VarChar(4) NOT NULL", CanBeNull:=false)>  _
	Public Property CodCliente() As String
		Get
			Return Me._CodCliente
		End Get
		Set
			If (String.Equals(Me._CodCliente, value) = false) Then
				If Me._Cliente.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCodClienteChanging(value)
				Me.SendPropertyChanging
				Me._CodCliente = value
				Me.SendPropertyChanged("CodCliente")
				Me.OnCodClienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cantidad", DbType:="Int NOT NULL")>  _
	Public Property Cantidad() As Integer
		Get
			Return Me._Cantidad
		End Get
		Set
			If ((Me._Cantidad = value)  _
						= false) Then
				Me.OnCantidadChanging(value)
				Me.SendPropertyChanging
				Me._Cantidad = value
				Me.SendPropertyChanged("Cantidad")
				Me.OnCantidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrecioUnitario", DbType:="Decimal(4,2) NOT NULL")>  _
	Public Property PrecioUnitario() As Decimal
		Get
			Return Me._PrecioUnitario
		End Get
		Set
			If ((Me._PrecioUnitario = value)  _
						= false) Then
				Me.OnPrecioUnitarioChanging(value)
				Me.SendPropertyChanging
				Me._PrecioUnitario = value
				Me.SendPropertyChanged("PrecioUnitario")
				Me.OnPrecioUnitarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Detalle", Storage:="_Cliente", ThisKey:="CodCliente", OtherKey:="CodCliente", IsForeignKey:=true)>  _
	Public Property Cliente() As Cliente
		Get
			Return Me._Cliente.Entity
		End Get
		Set
			Dim previousValue As Cliente = Me._Cliente.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Cliente.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Cliente.Entity = Nothing
					previousValue.Detalle.Remove(Me)
				End If
				Me._Cliente.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Detalle.Add(Me)
					Me._CodCliente = value.CodCliente
				Else
					Me._CodCliente = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Cliente")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Libro_Detalle", Storage:="_Libro", ThisKey:="CodLibro", OtherKey:="CodLibro", IsForeignKey:=true)>  _
	Public Property Libro() As Libro
		Get
			Return Me._Libro.Entity
		End Get
		Set
			Dim previousValue As Libro = Me._Libro.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Libro.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Libro.Entity = Nothing
					previousValue.Detalle.Remove(Me)
				End If
				Me._Libro.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Detalle.Add(Me)
					Me._CodLibro = value.CodLibro
				Else
					Me._CodLibro = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Libro")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Pedido_Detalle", Storage:="_Pedido", ThisKey:="NroPedido", OtherKey:="NroPedido", IsForeignKey:=true)>  _
	Public Property Pedido() As Pedido
		Get
			Return Me._Pedido.Entity
		End Get
		Set
			Dim previousValue As Pedido = Me._Pedido.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Pedido.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Pedido.Entity = Nothing
					previousValue.Detalle.Remove(Me)
				End If
				Me._Pedido.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Detalle.Add(Me)
					Me._NroPedido = value.NroPedido
				Else
					Me._NroPedido = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Pedido")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TLibro")>  _
Partial Public Class Libro
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CodLibro As String
	
	Private _Titulo As String
	
	Private _Autor As String
	
	Private _Genero As String
	
	Private _Resumen As String
	
	Private _Precio As Decimal
	
	Private _Stock As System.Nullable(Of Integer)
	
	Private _Detalle As EntitySet(Of Detalle)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCodLibroChanging(value As String)
    End Sub
    Partial Private Sub OnCodLibroChanged()
    End Sub
    Partial Private Sub OnTituloChanging(value As String)
    End Sub
    Partial Private Sub OnTituloChanged()
    End Sub
    Partial Private Sub OnAutorChanging(value As String)
    End Sub
    Partial Private Sub OnAutorChanged()
    End Sub
    Partial Private Sub OnGeneroChanging(value As String)
    End Sub
    Partial Private Sub OnGeneroChanged()
    End Sub
    Partial Private Sub OnResumenChanging(value As String)
    End Sub
    Partial Private Sub OnResumenChanged()
    End Sub
    Partial Private Sub OnPrecioChanging(value As Decimal)
    End Sub
    Partial Private Sub OnPrecioChanged()
    End Sub
    Partial Private Sub OnStockChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnStockChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Detalle = New EntitySet(Of Detalle)(AddressOf Me.attach_Detalle, AddressOf Me.detach_Detalle)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodLibro", DbType:="VarChar(4) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CodLibro() As String
		Get
			Return Me._CodLibro
		End Get
		Set
			If (String.Equals(Me._CodLibro, value) = false) Then
				Me.OnCodLibroChanging(value)
				Me.SendPropertyChanging
				Me._CodLibro = value
				Me.SendPropertyChanged("CodLibro")
				Me.OnCodLibroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Titulo", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Titulo() As String
		Get
			Return Me._Titulo
		End Get
		Set
			If (String.Equals(Me._Titulo, value) = false) Then
				Me.OnTituloChanging(value)
				Me.SendPropertyChanging
				Me._Titulo = value
				Me.SendPropertyChanged("Titulo")
				Me.OnTituloChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Autor", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Autor() As String
		Get
			Return Me._Autor
		End Get
		Set
			If (String.Equals(Me._Autor, value) = false) Then
				Me.OnAutorChanging(value)
				Me.SendPropertyChanging
				Me._Autor = value
				Me.SendPropertyChanged("Autor")
				Me.OnAutorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Genero", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Genero() As String
		Get
			Return Me._Genero
		End Get
		Set
			If (String.Equals(Me._Genero, value) = false) Then
				Me.OnGeneroChanging(value)
				Me.SendPropertyChanging
				Me._Genero = value
				Me.SendPropertyChanged("Genero")
				Me.OnGeneroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Resumen", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Resumen() As String
		Get
			Return Me._Resumen
		End Get
		Set
			If (String.Equals(Me._Resumen, value) = false) Then
				Me.OnResumenChanging(value)
				Me.SendPropertyChanging
				Me._Resumen = value
				Me.SendPropertyChanged("Resumen")
				Me.OnResumenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Precio", DbType:="Decimal(4,2) NOT NULL")>  _
	Public Property Precio() As Decimal
		Get
			Return Me._Precio
		End Get
		Set
			If ((Me._Precio = value)  _
						= false) Then
				Me.OnPrecioChanging(value)
				Me.SendPropertyChanging
				Me._Precio = value
				Me.SendPropertyChanged("Precio")
				Me.OnPrecioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Stock", DbType:="Int")>  _
	Public Property Stock() As System.Nullable(Of Integer)
		Get
			Return Me._Stock
		End Get
		Set
			If (Me._Stock.Equals(value) = false) Then
				Me.OnStockChanging(value)
				Me.SendPropertyChanging
				Me._Stock = value
				Me.SendPropertyChanged("Stock")
				Me.OnStockChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Libro_Detalle", Storage:="_Detalle", ThisKey:="CodLibro", OtherKey:="CodLibro")>  _
	Public Property Detalle() As EntitySet(Of Detalle)
		Get
			Return Me._Detalle
		End Get
		Set
			Me._Detalle.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Detalle(ByVal entity As Detalle)
		Me.SendPropertyChanging
		entity.Libro = Me
	End Sub
	
	Private Sub detach_Detalle(ByVal entity As Detalle)
		Me.SendPropertyChanging
		entity.Libro = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TPedido")>  _
Partial Public Class Pedido
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _NroPedido As String
	
	Private _Fecha As Date
	
	Private _Anulado As Boolean
	
	Private _Detalle As EntitySet(Of Detalle)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnNroPedidoChanging(value As String)
    End Sub
    Partial Private Sub OnNroPedidoChanged()
    End Sub
    Partial Private Sub OnFechaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaChanged()
    End Sub
    Partial Private Sub OnAnuladoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnAnuladoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Detalle = New EntitySet(Of Detalle)(AddressOf Me.attach_Detalle, AddressOf Me.detach_Detalle)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NroPedido", DbType:="VarChar(6) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property NroPedido() As String
		Get
			Return Me._NroPedido
		End Get
		Set
			If (String.Equals(Me._NroPedido, value) = false) Then
				Me.OnNroPedidoChanging(value)
				Me.SendPropertyChanging
				Me._NroPedido = value
				Me.SendPropertyChanged("NroPedido")
				Me.OnNroPedidoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="DateTime NOT NULL")>  _
	Public Property Fecha() As Date
		Get
			Return Me._Fecha
		End Get
		Set
			If ((Me._Fecha = value)  _
						= false) Then
				Me.OnFechaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha = value
				Me.SendPropertyChanged("Fecha")
				Me.OnFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Anulado", DbType:="Bit NOT NULL")>  _
	Public Property Anulado() As Boolean
		Get
			Return Me._Anulado
		End Get
		Set
			If ((Me._Anulado = value)  _
						= false) Then
				Me.OnAnuladoChanging(value)
				Me.SendPropertyChanging
				Me._Anulado = value
				Me.SendPropertyChanged("Anulado")
				Me.OnAnuladoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Pedido_Detalle", Storage:="_Detalle", ThisKey:="NroPedido", OtherKey:="NroPedido")>  _
	Public Property Detalle() As EntitySet(Of Detalle)
		Get
			Return Me._Detalle
		End Get
		Set
			Me._Detalle.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Detalle(ByVal entity As Detalle)
		Me.SendPropertyChanging
		entity.Pedido = Me
	End Sub
	
	Private Sub detach_Detalle(ByVal entity As Detalle)
		Me.SendPropertyChanging
		entity.Pedido = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TUsuario")>  _
Partial Public Class Usuario
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CodUsuario As String
	
	Private _NomUsuario As String
	
	Private _Contrasena As String
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCodUsuarioChanging(value As String)
    End Sub
    Partial Private Sub OnCodUsuarioChanged()
    End Sub
    Partial Private Sub OnNomUsuarioChanging(value As String)
    End Sub
    Partial Private Sub OnNomUsuarioChanged()
    End Sub
    Partial Private Sub OnContrasenaChanging(value As String)
    End Sub
    Partial Private Sub OnContrasenaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodUsuario", DbType:="VarChar(4) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CodUsuario() As String
		Get
			Return Me._CodUsuario
		End Get
		Set
			If (String.Equals(Me._CodUsuario, value) = false) Then
				Me.OnCodUsuarioChanging(value)
				Me.SendPropertyChanging
				Me._CodUsuario = value
				Me.SendPropertyChanged("CodUsuario")
				Me.OnCodUsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NomUsuario", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property NomUsuario() As String
		Get
			Return Me._NomUsuario
		End Get
		Set
			If (String.Equals(Me._NomUsuario, value) = false) Then
				Me.OnNomUsuarioChanging(value)
				Me.SendPropertyChanging
				Me._NomUsuario = value
				Me.SendPropertyChanged("NomUsuario")
				Me.OnNomUsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Contrasena", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property Contrasena() As String
		Get
			Return Me._Contrasena
		End Get
		Set
			If (String.Equals(Me._Contrasena, value) = false) Then
				Me.OnContrasenaChanging(value)
				Me.SendPropertyChanging
				Me._Contrasena = value
				Me.SendPropertyChanged("Contrasena")
				Me.OnContrasenaChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

Partial Public Class spLoginUsuarioEResult
	
	Private _CodError As Integer
	
	Private _Mensaje As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodError", DbType:="Int NOT NULL")>  _
	Public Property CodError() As Integer
		Get
			Return Me._CodError
		End Get
		Set
			If ((Me._CodError = value)  _
						= false) Then
				Me._CodError = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mensaje", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property Mensaje() As String
		Get
			Return Me._Mensaje
		End Get
		Set
			If (String.Equals(Me._Mensaje, value) = false) Then
				Me._Mensaje = value
			End If
		End Set
	End Property
End Class

Partial Public Class spActualizarLibroResult
	
	Private _CodError As Integer
	
	Private _Mensaje As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodError", DbType:="Int NOT NULL")>  _
	Public Property CodError() As Integer
		Get
			Return Me._CodError
		End Get
		Set
			If ((Me._CodError = value)  _
						= false) Then
				Me._CodError = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mensaje", DbType:="VarChar(17) NOT NULL", CanBeNull:=false)>  _
	Public Property Mensaje() As String
		Get
			Return Me._Mensaje
		End Get
		Set
			If (String.Equals(Me._Mensaje, value) = false) Then
				Me._Mensaje = value
			End If
		End Set
	End Property
End Class

Partial Public Class spEliminarLibroResult
	
	Private _CodError As Integer
	
	Private _Mensaje As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodError", DbType:="Int NOT NULL")>  _
	Public Property CodError() As Integer
		Get
			Return Me._CodError
		End Get
		Set
			If ((Me._CodError = value)  _
						= false) Then
				Me._CodError = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mensaje", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property Mensaje() As String
		Get
			Return Me._Mensaje
		End Get
		Set
			If (String.Equals(Me._Mensaje, value) = false) Then
				Me._Mensaje = value
			End If
		End Set
	End Property
End Class

Partial Public Class spListarLibroResult
	
	Private _CodLibro As String
	
	Private _Titulo As String
	
	Private _Autor As String
	
	Private _Genero As String
	
	Private _Resumen As String
	
	Private _Precio As Decimal
	
	Private _Stock As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodLibro", DbType:="VarChar(4) NOT NULL", CanBeNull:=false)>  _
	Public Property CodLibro() As String
		Get
			Return Me._CodLibro
		End Get
		Set
			If (String.Equals(Me._CodLibro, value) = false) Then
				Me._CodLibro = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Titulo", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Titulo() As String
		Get
			Return Me._Titulo
		End Get
		Set
			If (String.Equals(Me._Titulo, value) = false) Then
				Me._Titulo = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Autor", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Autor() As String
		Get
			Return Me._Autor
		End Get
		Set
			If (String.Equals(Me._Autor, value) = false) Then
				Me._Autor = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Genero", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Genero() As String
		Get
			Return Me._Genero
		End Get
		Set
			If (String.Equals(Me._Genero, value) = false) Then
				Me._Genero = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Resumen", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Resumen() As String
		Get
			Return Me._Resumen
		End Get
		Set
			If (String.Equals(Me._Resumen, value) = false) Then
				Me._Resumen = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Precio", DbType:="Decimal(4,2) NOT NULL")>  _
	Public Property Precio() As Decimal
		Get
			Return Me._Precio
		End Get
		Set
			If ((Me._Precio = value)  _
						= false) Then
				Me._Precio = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Stock", DbType:="Int")>  _
	Public Property Stock() As System.Nullable(Of Integer)
		Get
			Return Me._Stock
		End Get
		Set
			If (Me._Stock.Equals(value) = false) Then
				Me._Stock = value
			End If
		End Set
	End Property
End Class

Partial Public Class spActualizarClienteResult
	
	Private _CodError As Integer
	
	Private _Mensaje As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodError", DbType:="Int NOT NULL")>  _
	Public Property CodError() As Integer
		Get
			Return Me._CodError
		End Get
		Set
			If ((Me._CodError = value)  _
						= false) Then
				Me._CodError = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mensaje", DbType:="VarChar(19) NOT NULL", CanBeNull:=false)>  _
	Public Property Mensaje() As String
		Get
			Return Me._Mensaje
		End Get
		Set
			If (String.Equals(Me._Mensaje, value) = false) Then
				Me._Mensaje = value
			End If
		End Set
	End Property
End Class

Partial Public Class spEliminarClienteResult
	
	Private _CodError As Integer
	
	Private _Mensaje As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodError", DbType:="Int NOT NULL")>  _
	Public Property CodError() As Integer
		Get
			Return Me._CodError
		End Get
		Set
			If ((Me._CodError = value)  _
						= false) Then
				Me._CodError = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mensaje", DbType:="VarChar(27) NOT NULL", CanBeNull:=false)>  _
	Public Property Mensaje() As String
		Get
			Return Me._Mensaje
		End Get
		Set
			If (String.Equals(Me._Mensaje, value) = false) Then
				Me._Mensaje = value
			End If
		End Set
	End Property
End Class

Partial Public Class spListarClientesResult
	
	Private _CodCliente As String
	
	Private _Apellidos As String
	
	Private _Nombres As String
	
	Private _Direccion As String
	
	Private _Telefono As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodCliente", DbType:="VarChar(4) NOT NULL", CanBeNull:=false)>  _
	Public Property CodCliente() As String
		Get
			Return Me._CodCliente
		End Get
		Set
			If (String.Equals(Me._CodCliente, value) = false) Then
				Me._CodCliente = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Apellidos", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property Apellidos() As String
		Get
			Return Me._Apellidos
		End Get
		Set
			If (String.Equals(Me._Apellidos, value) = false) Then
				Me._Apellidos = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nombres", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property Nombres() As String
		Get
			Return Me._Nombres
		End Get
		Set
			If (String.Equals(Me._Nombres, value) = false) Then
				Me._Nombres = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Direccion", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Direccion() As String
		Get
			Return Me._Direccion
		End Get
		Set
			If (String.Equals(Me._Direccion, value) = false) Then
				Me._Direccion = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Telefono", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property Telefono() As String
		Get
			Return Me._Telefono
		End Get
		Set
			If (String.Equals(Me._Telefono, value) = false) Then
				Me._Telefono = value
			End If
		End Set
	End Property
End Class

Partial Public Class spAgregarLibroResult
	
	Private _CodError As Integer
	
	Private _Mensaje As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodError", DbType:="Int NOT NULL")>  _
	Public Property CodError() As Integer
		Get
			Return Me._CodError
		End Get
		Set
			If ((Me._CodError = value)  _
						= false) Then
				Me._CodError = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mensaje", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property Mensaje() As String
		Get
			Return Me._Mensaje
		End Get
		Set
			If (String.Equals(Me._Mensaje, value) = false) Then
				Me._Mensaje = value
			End If
		End Set
	End Property
End Class

Partial Public Class spAgregarClienteResult
	
	Private _CodError As Integer
	
	Private _Mensaje As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodError", DbType:="Int NOT NULL")>  _
	Public Property CodError() As Integer
		Get
			Return Me._CodError
		End Get
		Set
			If ((Me._CodError = value)  _
						= false) Then
				Me._CodError = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mensaje", DbType:="VarChar(17) NOT NULL", CanBeNull:=false)>  _
	Public Property Mensaje() As String
		Get
			Return Me._Mensaje
		End Get
		Set
			If (String.Equals(Me._Mensaje, value) = false) Then
				Me._Mensaje = value
			End If
		End Set
	End Property
End Class

Partial Public Class spBuscarClienteResult
	
	Private _CodCliente As String
	
	Private _Apellidos As String
	
	Private _Nombres As String
	
	Private _Direccion As String
	
	Private _Telefono As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodCliente", DbType:="VarChar(4) NOT NULL", CanBeNull:=false)>  _
	Public Property CodCliente() As String
		Get
			Return Me._CodCliente
		End Get
		Set
			If (String.Equals(Me._CodCliente, value) = false) Then
				Me._CodCliente = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Apellidos", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property Apellidos() As String
		Get
			Return Me._Apellidos
		End Get
		Set
			If (String.Equals(Me._Apellidos, value) = false) Then
				Me._Apellidos = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nombres", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property Nombres() As String
		Get
			Return Me._Nombres
		End Get
		Set
			If (String.Equals(Me._Nombres, value) = false) Then
				Me._Nombres = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Direccion", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Direccion() As String
		Get
			Return Me._Direccion
		End Get
		Set
			If (String.Equals(Me._Direccion, value) = false) Then
				Me._Direccion = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Telefono", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property Telefono() As String
		Get
			Return Me._Telefono
		End Get
		Set
			If (String.Equals(Me._Telefono, value) = false) Then
				Me._Telefono = value
			End If
		End Set
	End Property
End Class

Partial Public Class spBuscarLibroResult
	
	Private _CodLibro As String
	
	Private _Titulo As String
	
	Private _Autor As String
	
	Private _Genero As String
	
	Private _Resumen As String
	
	Private _Precio As Decimal
	
	Private _Stock As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodLibro", DbType:="VarChar(4) NOT NULL", CanBeNull:=false)>  _
	Public Property CodLibro() As String
		Get
			Return Me._CodLibro
		End Get
		Set
			If (String.Equals(Me._CodLibro, value) = false) Then
				Me._CodLibro = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Titulo", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Titulo() As String
		Get
			Return Me._Titulo
		End Get
		Set
			If (String.Equals(Me._Titulo, value) = false) Then
				Me._Titulo = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Autor", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Autor() As String
		Get
			Return Me._Autor
		End Get
		Set
			If (String.Equals(Me._Autor, value) = false) Then
				Me._Autor = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Genero", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Genero() As String
		Get
			Return Me._Genero
		End Get
		Set
			If (String.Equals(Me._Genero, value) = false) Then
				Me._Genero = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Resumen", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Resumen() As String
		Get
			Return Me._Resumen
		End Get
		Set
			If (String.Equals(Me._Resumen, value) = false) Then
				Me._Resumen = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Precio", DbType:="Decimal(4,2) NOT NULL")>  _
	Public Property Precio() As Decimal
		Get
			Return Me._Precio
		End Get
		Set
			If ((Me._Precio = value)  _
						= false) Then
				Me._Precio = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Stock", DbType:="Int")>  _
	Public Property Stock() As System.Nullable(Of Integer)
		Get
			Return Me._Stock
		End Get
		Set
			If (Me._Stock.Equals(value) = false) Then
				Me._Stock = value
			End If
		End Set
	End Property
End Class

Partial Public Class spRealizarVentaResult
	
	Private _CodError As Integer
	
	Private _Mensaje As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodError", DbType:="Int NOT NULL")>  _
	Public Property CodError() As Integer
		Get
			Return Me._CodError
		End Get
		Set
			If ((Me._CodError = value)  _
						= false) Then
				Me._CodError = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mensaje", DbType:="VarChar(33) NOT NULL", CanBeNull:=false)>  _
	Public Property Mensaje() As String
		Get
			Return Me._Mensaje
		End Get
		Set
			If (String.Equals(Me._Mensaje, value) = false) Then
				Me._Mensaje = value
			End If
		End Set
	End Property
End Class

Partial Public Class spListarVentasResult
	
	Private _NroPedido As String
	
	Private _CodCliente As String
	
	Private _CodLibro As String
	
	Private _Nombres As String
	
	Private _Apellidos As String
	
	Private _Titulo As String
	
	Private _Cantidad As Integer
	
	Private _Precio As Decimal
	
	Private _Total As System.Nullable(Of Decimal)
	
	Private _Fecha As Date
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NroPedido", DbType:="VarChar(6) NOT NULL", CanBeNull:=false)>  _
	Public Property NroPedido() As String
		Get
			Return Me._NroPedido
		End Get
		Set
			If (String.Equals(Me._NroPedido, value) = false) Then
				Me._NroPedido = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodCliente", DbType:="VarChar(4) NOT NULL", CanBeNull:=false)>  _
	Public Property CodCliente() As String
		Get
			Return Me._CodCliente
		End Get
		Set
			If (String.Equals(Me._CodCliente, value) = false) Then
				Me._CodCliente = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodLibro", DbType:="VarChar(4) NOT NULL", CanBeNull:=false)>  _
	Public Property CodLibro() As String
		Get
			Return Me._CodLibro
		End Get
		Set
			If (String.Equals(Me._CodLibro, value) = false) Then
				Me._CodLibro = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nombres", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property Nombres() As String
		Get
			Return Me._Nombres
		End Get
		Set
			If (String.Equals(Me._Nombres, value) = false) Then
				Me._Nombres = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Apellidos", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property Apellidos() As String
		Get
			Return Me._Apellidos
		End Get
		Set
			If (String.Equals(Me._Apellidos, value) = false) Then
				Me._Apellidos = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Titulo", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Titulo() As String
		Get
			Return Me._Titulo
		End Get
		Set
			If (String.Equals(Me._Titulo, value) = false) Then
				Me._Titulo = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cantidad", DbType:="Int NOT NULL")>  _
	Public Property Cantidad() As Integer
		Get
			Return Me._Cantidad
		End Get
		Set
			If ((Me._Cantidad = value)  _
						= false) Then
				Me._Cantidad = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Precio", DbType:="Decimal(4,2) NOT NULL")>  _
	Public Property Precio() As Decimal
		Get
			Return Me._Precio
		End Get
		Set
			If ((Me._Precio = value)  _
						= false) Then
				Me._Precio = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Decimal(15,2)")>  _
	Public Property Total() As System.Nullable(Of Decimal)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me._Total = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="DateTime NOT NULL")>  _
	Public Property Fecha() As Date
		Get
			Return Me._Fecha
		End Get
		Set
			If ((Me._Fecha = value)  _
						= false) Then
				Me._Fecha = value
			End If
		End Set
	End Property
End Class
